###########################################
# Test for I_S.INNODB_CHANGED_PAGES table #
###########################################

--source include/have_innodb.inc

--source include/delete_innodb_bitmaps.inc

--disable_warnings
DROP TABLE IF EXISTS T1;
--enable_warnings

let $old_changed_pages_limit= `SELECT @@GLOBAL.INNODB_CHANGED_PAGES_LIMIT`;

# In order to test multiple bitmap file support we need to ensure that two things
# happen: 1) InnoDB checkpoints; 2) bitmap file rotation.  The best way to ensure
# both is to restart the server.

--source include/restart_mysqld.inc

CREATE TABLE T1 (F1 CHAR(255)) ENGINE=INNODB;

let $t1_space_id =
	`SELECT SPACE
		FROM INFORMATION_SCHEMA.INNODB_SYS_TABLES
		WHERE
		INFORMATION_SCHEMA.INNODB_SYS_TABLES.SCHEMA='test' AND
		INFORMATION_SCHEMA.INNODB_SYS_TABLES.NAME='T1'`;

--source include/restart_mysqld.inc
                
let $r1_start= `SELECT MIN(START_LSN) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES`;
let $r1_end= `SELECT MAX(END_LSN) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES`;

--disable_query_log
--echo 1st interval end LSN greater than interval start LSN:
eval SELECT $r1_end > $r1_start AS should_be_1;
--enable_query_log

# Restarts in a row without workload for T1 or any other table to verify that empty bitmaps
# are handled correctly.
--source include/restart_mysqld.inc
--source include/restart_mysqld.inc
--source include/restart_mysqld.inc

--disable_query_log
--echo log record interval start LSN should remain constant across the previous restarts
eval SELECT MIN(START_LSN)=$r1_start AS should_be_1 FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES;
--echo log record interval end LSN should remain constant across the previous restarts
eval SELECT MAX(END_LSN)=$r1_end AS should_be_1 FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES;
--enable_query_log

INSERT INTO T1 VALUES (REPEAT('A', 255));

--source include/restart_mysqld.inc

--disable_query_log
--echo log record interval start LSN should remain constant after workload
eval SELECT MIN(START_LSN)=$r1_start AS should_be_1 FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES;
let $r2_end= `SELECT MAX(END_LSN) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES`;

--echo log record interval end LSN should have advanced after workload
eval SELECT $r2_end>$r1_end AS should_be_1;

--echo At least some of the records should be attributed to T1
eval SELECT COUNT(*) > 0 AS should_be_1
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE SPACE_ID=$t1_space_id AND START_LSN>=$r1_end;
--enable_query_log

INSERT INTO T1 VALUES (REPEAT('B', 255));

--source include/restart_mysqld.inc

--disable_query_log
--echo log record interval start LSN should remain constant after workload
eval SELECT MIN(START_LSN)=$r1_start AS should_be_1 FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES;
let $r3_end= `SELECT MAX(END_LSN) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES`;

--echo log record interval end LSN should have advanced after workload
eval SELECT $r3_end>$r2_end AS should_be_1;
--enable_query_log

INSERT INTO T1 VALUES (REPEAT('C', 255));

--source include/restart_mysqld.inc

--disable_query_log
--echo log record interval start LSN should remain constant after workload
eval SELECT MIN(START_LSN)=$r1_start AS should_be_1 FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES;
let $r4_end= `SELECT MAX(END_LSN) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES`;

--echo log record interval end LSN should have advanced after workload
eval SELECT $r4_end>$r3_end AS should_be_1;

--echo At least some of the records should be attributed to T1
eval SELECT COUNT(*) > 0 AS should_be_1
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE SPACE_ID=$t1_space_id AND START_LSN>=$r2_end;


###################################################################
# Gather data for condition pushdown testing not using conditions #
###################################################################
--disable_result_log
SET @cond_test_max_end_lsn=
	(SELECT MAX(end_lsn)
		FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES);

SET @cond_test_max_start_lsn=
        (SELECT MAX(start_lsn)
                FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES);
                
SET @cond_test_pages_count=
	(SELECT count(*)
		FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
		GROUP BY end_lsn
		ORDER BY end_lsn DESC
		LIMIT 1);
--enable_result_log

SET GLOBAL INNODB_CHANGED_PAGES_LIMIT = 0;
--echo Total number of changed pages is smaller than reasonable limit (should be 1):
eval SELECT COUNT(DISTINCT PAGE_ID) < 10
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE SPACE_ID = $t1_space_id;

--echo Check if the maximum page id is less than resonable limit (should be 1):
eval SELECT MAX(PAGE_ID) < 10
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE SPACE_ID = $t1_space_id;

--echo Check that the combination of the two above does not violate the pigeon hole principle (should be 1):
eval SELECT MAX(PAGE_ID) + 1 >= COUNT(DISTINCT PAGE_ID)
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE SPACE_ID = $t1_space_id;
--enable_query_log

###########################################################
# The records where START_LSN >= END_LSN should be absent #
###########################################################
SELECT COUNT(*)
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN >= END_LSN;

######################################################
# Check if condition pushdown doesn't break anything #
######################################################
--echo ICP tests (all should be 1):

# Baseline as ICP currently does not support equality
SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE END_LSN = @cond_test_max_end_lsn;
  
SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  END_LSN > (@cond_test_max_end_lsn - 1) AND
  END_LSN < (@cond_test_max_end_lsn + 1);

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  END_LSN >= @cond_test_max_end_lsn AND
  END_LSN <= @cond_test_max_end_lsn;

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  (@cond_test_max_end_lsn - 1) < END_LSN AND
  @cond_test_max_end_lsn >= END_LSN;

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN <= @cond_test_max_end_lsn AND
  END_LSN >= @cond_test_max_end_lsn;

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN >= @cond_test_max_start_lsn;

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN > (@cond_test_max_start_lsn - 1);

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN >= @cond_test_max_start_lsn AND
  END_LSN <= @cond_test_max_end_lsn;

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN >= @cond_test_max_start_lsn AND
  END_LSN >= @cond_test_max_start_lsn;

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  @cond_test_max_start_lsn <= START_LSN AND
  @cond_test_max_end_lsn >= END_LSN;

# Empty range
SELECT COUNT(*)
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN > @cond_test_max_lsn AND
  END_LSN < @cond_test_max_lsn;

SELECT COUNT(*)
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN > @cond_test_max_lsn + 10 AND
  END_LSN < @cond_test_max_lsn - 10;
  
# Test the combination of ICP and bitmap file selection
--disable_query_log
--disable_result_log
SET @total_pages= (SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES);

eval SET @r1_r4_pages= (SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN >= $r1_start AND END_LSN <= $r4_end);

eval SET @r1_r3_pages= (SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN >= $r1_start AND END_LSN <= $r3_end);

eval SET @r1_r2_pages= (SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN >= $r1_start AND END_LSN <= $r2_end);

eval SET @r2_r4_pages= (SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN >= $r2_end AND END_LSN <= $r4_end);
  
eval SET @r2_r3_pages= (SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN >= $r2_end AND END_LSN <= $r3_end);

eval SET @r3_r4_pages= (SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN >= $r3_end AND END_LSN <= $r4_end);
--enable_result_log
--enable_query_log

SELECT @total_pages=@r1_r4_pages AS should_be_1;
SELECT @r1_r2_pages+@r2_r3_pages+@r3_r4_pages=@r1_r4_pages AS should_be_1;
SELECT @r1_r2_pages+@r2_r3_pages=@r1_r3_pages AS should_be_1;
SELECT @r2_r3_pages+@r3_r4_pages=@r2_r4_pages AS should_be_1;
  
################################################
# Check how limit for maximum rows count works #
################################################

SET GLOBAL INNODB_CHANGED_PAGES_LIMIT = 1;
SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES;

SET GLOBAL INNODB_CHANGED_PAGES_LIMIT = 5;
SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES;

eval SET GLOBAL INNODB_CHANGED_PAGES_LIMIT = $old_changed_pages_limit;

DROP TABLE T1;
